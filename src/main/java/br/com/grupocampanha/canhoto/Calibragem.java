/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JDialog.java to edit this template
 */
package br.com.grupocampanha.canhoto;

import br.com.grupocampanha.xml.Document;
import br.com.grupocampanha.xml.Node;
import br.com.grupocampanha.xml.XML;
import java.io.File;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;

/**
 *
 * @author jfc
 */
public class Calibragem extends javax.swing.JDialog {

    String palavra = "";
    int progressbar = 0;
    float total = 0;
    List<Float> calibragens;

    public Calibragem() {
        this.setModal(true);

        calibragens = new ArrayList();
        initComponents();
        jProgressBar1.setMaximum(10);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jProgressBar1 = new javax.swing.JProgressBar();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setResizable(false);
        addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                formKeyTyped(evt);
            }
        });

        jButton1.setText("Reset");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jProgressBar1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(177, Short.MAX_VALUE)
                .addComponent(jButton1)
                .addGap(162, 162, 162))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(33, 33, 33)
                .addComponent(jProgressBar1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 9, Short.MAX_VALUE)
                .addComponent(jButton1))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_formKeyTyped
        if (evt.getKeyChar() == '\n' || evt.getKeyChar() == '\r' || evt.getKeyCode() == evt.VK_ENTER)
            return;
        palavra += evt.getKeyChar();
        float tempo = TimerCali.tempo(palavra);
        if (tempo != -1 && progressbar < 11) {
            calibragens.add(tempo);
              palavra = "";
            System.out.println(tempo);
             progressbar++;
              jProgressBar1.setValue(progressbar);
          if (progressbar == 10) {
            makeCalibragem();
            JOptionPane.showMessageDialog(this, "calibragem completa");
        }
        } 
       
       
        
    }//GEN-LAST:event_formKeyTyped

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
      palavra = "";
     progressbar = 0;
     total = 0;
    jProgressBar1.setValue(0);
        calibragens = new ArrayList();
        TimerCali.reset();
        this.requestFocus();
    }//GEN-LAST:event_jButton1ActionPerformed
    private void makeCalibragem() {

        calibragens.forEach(i -> {
            if(i> total)
            total = i;
        });
        if(JOptionPane.showConfirmDialog(this, "O TOTAL FOI resultado foi" + total + " deseja salvar?","??",JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION)
            try {
            Document doc = XML.parse(new File("./Config.xml"));
            Node node = doc.node;
            node.find(f -> f.getNome().equalsIgnoreCase("TempoLimite")).add(Float.toString(total));
            doc.write(doc);
        } catch (Exception ex) {
            Logger.getLogger(Calibragem.class.getName()).log(Level.SEVERE, null, ex);
        }

    }



    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JProgressBar jProgressBar1;
    // End of variables declaration//GEN-END:variables
}

class TimerCali {

    private static long tempoInicial = 0;
     static boolean primeiraEntrada = true;
     public static void reset(){
     primeiraEntrada = true;
     tempoInicial = 0;
     }
    public static float tempo(String texto) {

        if (primeiraEntrada) {
            tempoInicial = System.currentTimeMillis();
            primeiraEntrada = false;
        }

        if (texto.length() == 47) {
            primeiraEntrada = true;
            return (System.currentTimeMillis() - tempoInicial) / 1000f;
        }
        return -1;
    }
}
